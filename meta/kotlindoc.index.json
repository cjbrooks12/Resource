{
  "ownKey": "kotlindoc",
  "childrenPages": {"kotlindoc": {
    "ownKey": "kotlindoc",
    "childrenPages": {"resource": {
      "ownKey": "resource",
      "childrenPages": {"com": {
        "ownKey": "com",
        "childrenPages": {"javiersc": {
          "ownKey": "javiersc",
          "childrenPages": {"resources": {
            "ownKey": "resources",
            "childrenPages": {"resource": {
              "ownKey": "resource",
              "childrenPages": {
                "extensions": {
                  "ownKey": "extensions",
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc/resource",
                      "baseUrl": "http://resource.javiersc.com",
                      "fileName": "com/javiersc/resources/resource/extensions",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/extensions"
                    },
                    "description": "",
                    "title": "com.javiersc.resources.resource.extensions",
                    "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
                  }]
                },
                "resource": {
                  "ownKey": "resource",
                  "childrenPages": {
                    "folder": {
                      "ownKey": "folder",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc/resource",
                          "baseUrl": "http://resource.javiersc.com",
                          "fileName": "com/javiersc/resources/resource/resource/folder",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/resource/folder"
                        },
                        "description": "",
                        "title": "Folder",
                        "content": "<p>CommentComponent(kind=text, text=A builder which lets fold a Resource with a series of functions that will be invoked based on\nthe Resource state., value=null)<\/p>\n"
                      }]
                    },
                    "success": {
                      "ownKey": "success",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc/resource",
                          "baseUrl": "http://resource.javiersc.com",
                          "fileName": "com/javiersc/resources/resource/resource/success",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/resource/success"
                        },
                        "description": "",
                        "title": "Success",
                        "content": "<p>CommentComponent(kind=text, text=Success state which has a param , value=) CommentComponent(kind=typeName, text=data, value=com.javiersc.resources.resource.Resource.Success.data) CommentComponent(kind=text, text= of type , value=) CommentComponent(kind=typeName, text=R, value=com.javiersc.resources.resource.Resource.Success.R) CommentComponent(kind=text, text=., value=null)<\/p>\n"
                      }]
                    },
                    "loading": {
                      "ownKey": "loading",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc/resource",
                          "baseUrl": "http://resource.javiersc.com",
                          "fileName": "com/javiersc/resources/resource/resource/loading",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/resource/loading"
                        },
                        "description": "",
                        "title": "Loading",
                        "content": "<p>CommentComponent(kind=text, text=Loading state which has no params, value=null)<\/p>\n"
                      }]
                    },
                    "error": {
                      "ownKey": "error",
                      "ownPages": [{
                        "reference": {
                          "path": "kotlindoc/resource",
                          "baseUrl": "http://resource.javiersc.com",
                          "fileName": "com/javiersc/resources/resource/resource/error",
                          "extension": "html",
                          "usePrettyUrl": true,
                          "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/resource/error"
                        },
                        "description": "",
                        "title": "Error",
                        "content": "<p>CommentComponent(kind=text, text=Error state which has a param , value=) CommentComponent(kind=typeName, text=error, value=com.javiersc.resources.resource.Resource.Error.error) CommentComponent(kind=text, text= of type , value=) CommentComponent(kind=typeName, text=E, value=com.javiersc.resources.resource.Resource.Error.E) CommentComponent(kind=text, text=, value=null)<\/p>\n"
                      }]
                    }
                  },
                  "ownPages": [{
                    "reference": {
                      "path": "kotlindoc/resource",
                      "baseUrl": "http://resource.javiersc.com",
                      "fileName": "com/javiersc/resources/resource/resource",
                      "extension": "html",
                      "usePrettyUrl": true,
                      "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource/resource"
                    },
                    "description": "",
                    "title": "Resource",
                    "content": "<p>CommentComponent(kind=text, text=This class lets wrap any thing and add an associated state:\nLoading, Success, Error and Cache, value=null)<\/p>\n"
                  }]
                }
              },
              "ownPages": [{
                "reference": {
                  "path": "kotlindoc/resource",
                  "baseUrl": "http://resource.javiersc.com",
                  "fileName": "com/javiersc/resources/resource",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "http://resource.javiersc.com/kotlindoc/resource/com/javiersc/resources/resource"
                },
                "description": "",
                "title": "com.javiersc.resources.resource",
                "content": "<p>CommentComponent(kind=text, text=, value=null)<\/p>\n"
              }]
            }}
          }}
        }}
      }},
      "ownPages": [{
        "reference": {
          "path": "kotlindoc",
          "baseUrl": "http://resource.javiersc.com",
          "fileName": "resource",
          "extension": "html",
          "usePrettyUrl": true,
          "link": "http://resource.javiersc.com/kotlindoc/resource"
        },
        "description": "",
        "title": "Resource",
        "content": "<table>\n<thead>\n<tr><th align=\"left\"><a href=\"https://repo1.maven.org/maven2/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/maven-central/v/com.javiersc.resources/resource?label=Master\" alt=\"Master Download\" /><\/a><\/th><th align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/master\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/master?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Master\" /><\/a><\/th><th align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3AMaster/master\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Master/master?label=Build&amp;logo=GitHub\" alt=\"Master Build\" /><\/a><\/th><th align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391050\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/master?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Master\" /><\/a><\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td align=\"left\"><a href=\"https://oss.sonatype.org/content/repositories/snapshots/com/javiersc/resources/resource/\"><img src=\"https://img.shields.io/nexus/s/com.javiersc.resources/resource?server=https%3A%2F%2Foss.sonatype.org%2F&amp;label=Develop&amp;color=orange\" alt=\"Develop Download\" /><\/a><\/td><td align=\"left\"><a href=\"https://codecov.io/gh/JavierSegoviaCordoba/Resource/branch/develop\"><img src=\"https://img.shields.io/codecov/c/github/JavierSegoviaCordoba/resource/develop?label=Coverage&amp;logo=codecov&amp;logoColor=white\" alt=\"Coverage Develop\" /><\/a><\/td><td align=\"left\"><a href=\"https://github.com/JavierSegoviaCordoba/Resource/actions?query=workflow%3ADevelop/develop\"><img src=\"https://img.shields.io/github/workflow/status/JavierSegoviaCordoba/Resource/Develop/develop?label=Build&amp;logo=GitHub\" alt=\"Develop Build\" /><\/a><\/td><td align=\"left\"><a href=\"https://app.codacy.com/manual/JavierSegoviaCordoba/Resource/dashboard?bid=17391049\"><img src=\"https://img.shields.io/codacy/grade/cedb7663279a4526befcbe16be6bfd66/develop?label=Code%20quality&amp;logo=codacy&amp;logoColor=white\" alt=\"Quality Develop\" /><\/a><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h1 id=\"resource\"><a href=\"#resource\" id=\"resource\" class=\"anchor\"><\/a>Resource<\/h1>\n<p><code>Resource<\/code> is a <code>sealed class<\/code> that allows you to wrap any object based on a state. It has these options:<\/p>\n<ul>\n<li>🔄 Loading: To use at that moment that a loading indicator should appear.<\/li>\n<li>👍 Success: When the happy path occurs.<\/li>\n<li>❌ Error: If there is a problem you will get this.<\/li>\n<\/ul>\n<p>This library works very well when used in conjunction with\n<a href=\"https://github.com/JavierSegoviaCordoba/NetworkResponse\"><code>NetworkResponse<\/code><\/a> which is very similar\nto <code>Resource<\/code> but is intended for use with <code>Retrofit<\/code>.<\/p>\n<p>For more information see <a href=\"http://resource.javiersc.com/\">the website<\/a><\/p>\n<h2 id=\"download\"><a href=\"#download\" id=\"download\" class=\"anchor\"><\/a>Download<\/h2>\n<p>This library is Kotlin Multiplatform but at this moment <code>jvm<\/code> is the only artifact generated. It is\navailable at Maven Central.<\/p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.javiersc.resources:resource:$version&quot;)\n<\/code><\/pre>\n<h2 id=\"fold-your-resource\"><a href=\"#fold-your-resource\" id=\"fold-your-resource\" class=\"anchor\"><\/a>Fold your Resource<\/h2>\n<p>Fold a <code>Resource<\/code> invokes multiple callbacks to manage its state for any event. A normal flow can be:<\/p>\n<ol>\n<li>Emit <code>Loading<\/code> to show the progress indicator.<\/li>\n<li>Emit <code>Success<\/code> to populate your data or emit <code>Error<\/code> if something were wrong to show an error.<\/li>\n<\/ol>\n<pre><code class=\"language-kotlin\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.folder {\n    loading { println(&quot;Loading: Yes&quot;) }\n    noLoading { println(&quot;Loading: no&quot;) }  // Invoked\n\n    success { dog: Dog -&gt; println(&quot;Success: $dog&quot;) } // Invoked\n    noSuccess { println(&quot;Success: no&quot;) }\n\n    error { error: Error -&gt; println(&quot;Error: $error&quot;) }\n    noError { println(&quot;Error: no&quot;) }  // Invoked\n}\n<\/code><\/pre>\n<p>Exists a <code>fold<\/code> function similar to folder buth without the builder pattern<\/p>\n<pre><code class=\"language-kotlin\">val dog: Dog = Dog(&quot;Auri&quot;)\nval resource: Resource&lt;Dog, Error&gt; = Resource.Success(dog)\n\nresource.fold(\n    loading = { println(&quot;Loading: Yes&quot;) },\n    noLoading = { println(&quot;Loading: no&quot;) },  // Invoked\n    success = { dog: Dog -&gt; println(&quot;Success: $dog&quot;) }, // Invoked\n    noSuccess = { println(&quot;Success: no&quot;) },\n    error = { error: Error -&gt; println(&quot;Error: $error&quot;) },\n    noError = { println(&quot;Error: no&quot;) },  // Invoked\n)\n<\/code><\/pre>\n<p>You don't have to add all those functions, for example, you usually only have to use:<\/p>\n<ul>\n<li><code>loading<\/code> to show a progress indicator.<\/li>\n<li><code>noLoading<\/code> to hide the progress indicator.<\/li>\n<li><code>success<\/code> to load the data.<\/li>\n<li><code>error<\/code> to show and error.<\/li>\n<\/ul>\n<h2 id=\"mappers-and-common-extension-functions\"><a href=\"#mappers-and-common-extension-functions\" id=\"mappers-and-common-extension-functions\" class=\"anchor\"><\/a>Mappers and common extension functions<\/h2>\n<p>Map a <code>Resource<\/code> to another <code>Resource<\/code> is possible with the following\n<a href=\"/resource/src/main/kotlin/com/javiersc/resource/extensions/Resource.kt\">extension function<\/a>:<\/p>\n<ul>\n<li><code>Resource<\/code> to <code>Resource<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val anotherResource: Resource&lt;AnotherUser, AnotherError&gt; = resource.map(\n    data = { user: User -&gt; user.toAnotherUser() },\n    error = { error: Error -&gt; error.toAnotherError() }\n)\n// toAnotherUser() and toAnotherError() mappers should be created by yourself, if they are\n// extension functions and the resource uses inference for the type:\nval anotherResource = resource.map(User::toAnotherUser, Error::toAnotherError)\n<\/code><\/pre>\n<ul>\n<li>Some value to <code>Resource<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val name: String = &quot;Auri&quot;\nval nameResource = name.toResourceSuccess()\n\nval message: String = &quot;Some error message&quot;\nval messageResource = message.toResourceError()\n<\/code><\/pre>\n<ul>\n<li>A lot of checkers for each state, for example:<\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val resource: Resource&lt;String&gt; = Resource.Success(&quot;Auri&quot;)\nresource.ifSuccess { data: String -&gt;\n    println(data) // &quot;Auri&quot;\n}\n<\/code><\/pre>\n<p>You can see all the common extension functions\n<a href=\"/resource/src/main/kotlin/com/javiersc/resource/extensions/Flow.kt\">here<\/a>\nand <a href=\"/resource/src/main/kotlin/com/javiersc/resource/extensions/Any.kt\">here<\/a><\/p>\n<h2 id=\"flow\"><a href=\"#flow\" id=\"flow\" class=\"anchor\"><\/a>Flow<\/h2>\n<p>There are four <code>Flow<\/code> extension functions:<\/p>\n<ul>\n<li><code>Flow&lt;R&gt;.map(...)<\/code> included in Kotlin, let you to easily map the object inside of your <code>Flow<\/code> to\nany <code>Resource<\/code>:<\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersFlow: Flow&lt;List&lt;User&gt;&gt;\n\nval usersResourceFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; =\n    usersFlow.map { users: List&lt;User&gt; -&gt; Resource.Success(users) }\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceSuccess()<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersSuccessFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceSuccess()\n<\/code><\/pre>\n<ul>\n<li><code>Flow&lt;R&gt;.toResourceError()<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-kotlin\">val usersErrorFlow: Flow&lt;Resource&lt;List&lt;User&gt;, Error&gt;&gt; = usersFlow.toResourceError()\n<\/code><\/pre>\n"
      }]
    }}
  }}
}